/* MyParser.jj */
options {
  // 是否是静态,这里要设置为false
  STATIC = false;
  // 开启调试解析打印,默认是false
  DEBUG_PARSER = false;
  // 生产java时使用jdk版本,默认1.5
  JDK_VERSION = "1.8";

}

PARSER_BEGIN(ActionParser)
import com.zhaoyunfei.javacc.module.dto.ARCActionDto;
import com.zhaoyunfei.javacc.module.dto.CircleActionDto;
import com.zhaoyunfei.javacc.module.dto.LineActionDto;
import com.zhaoyunfei.javacc.module.dto.PTPActionDto;
import com.zhaoyunfei.javacc.module.service.IExecuteService;
import lombok.extern.slf4j.Slf4j;

import java.util.HashMap;
import java.util.Map;



import java.util.HashMap;
import java.util.Map;

@Slf4j
public class ActionParser {
	// 业务接口
    private IExecuteService iExecuteService;

	private boolean breakLoop=false;

	private boolean continueLoop=false;

	// 存储变量的 Map
	private Map<String, Float> variables = new HashMap<String, Float>();

    private boolean executePtpAction(String parameters) {
        log.debug("Executing PTP action with parameters: " + parameters);
		// 分割参数
        String[] split = parameters.split(",");

        String param1 =split.length>0? split[0]:"";

        float param2 =split.length>1? Float.parseFloat(split[1]):0;

        float param3 =split.length>2? Float.parseFloat(split[2]):0;

        int param4 =split.length>3? Integer.parseInt(split[3]):0;

        float param5 =split.length>4? Float.parseFloat(split[4]):0;

        float param6 =split.length>5? Float.parseFloat(split[5]):0;

        float param7 =split.length>6? Float.parseFloat(split[6]):0;

        float param8 =split.length>7? Float.parseFloat(split[7]):0;

        float param9 =split.length>8? Float.parseFloat(split[8]):0;

        float param10 =split.length>9? Float.parseFloat(split[9]):0;

        PTPActionDto dto = new PTPActionDto(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
        // 执行 PTP 动作
        return this.iExecuteService.executePtpAction(dto);
    }

    private boolean executeLinAction(String parameters) {
        log.debug("Executing LIN action with parameters: " + parameters);
		// 分割参数
        String[] split = parameters.split(",");

        String param1 =split.length>0? split[0]:"";

        float param2 =split.length>1? Float.parseFloat(split[1]):0;

        float param3 =split.length>2? Float.parseFloat(split[2]):0;

        int param4 =split.length>3? Integer.parseInt(split[3]):0;

        int param5 =split.length>4? Integer.parseInt(split[4]):0;

        float param6 =split.length>5? Float.parseFloat(split[5]):0;

        float param7 =split.length>6? Float.parseFloat(split[6]):0;

        float param8 =split.length>7? Float.parseFloat(split[7]):0;

        float param9 =split.length>8? Float.parseFloat(split[8]):0;

        float param10 =split.length>9? Float.parseFloat(split[9]):0;

        float param11 =split.length>10? Float.parseFloat(split[10]):0;

        LineActionDto dto = new LineActionDto(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
        // 执行 LIN动作
        return this.iExecuteService.executeLinAction(dto);
    }

    private boolean executeArcAction(String parameters) {
        log.debug("Executing ARC action with parameters: " + parameters);
		// 分割参数
        String[] split = parameters.split(",");

        String param1 =split.length>0? split[0]:"";

        String param2 =split.length>1? split[1]:"";

        int param3 =split.length>2? Integer.parseInt(split[2]):0;

        float param4 =split.length>3? Float.parseFloat(split[3]):0;

		ARCActionDto dto=new ARCActionDto(param1,param2,param3,param4);
        // 执行 ARC 动作
        return this.iExecuteService.executeArcAction(dto);
    }

    private boolean executeCircleAction(String parameters) {
        log.debug("Executing CIRCLE action with parameters: " + parameters);
		// 根据规则分割参数
        String[] split = parameters.split(",");

        String param1 =split.length>0? split[0]:"";

        String param2 =split.length>1? split[1]:"";

        int param3 =split.length>2? Integer.parseInt(split[2]):0;

        int param4 =split.length>3? Integer.parseInt(split[3]):0;

        float param5 =split.length>4? Float.parseFloat(split[4]):0;

        float param6 =split.length>5? Float.parseFloat(split[5]):0;

        float param7 =split.length>6? Float.parseFloat(split[6]):0;

        float param8 =split.length>7? Float.parseFloat(split[7]):0;

        float param9 =split.length>8? Float.parseFloat(split[8]):0;

        float param10 =split.length>9? Float.parseFloat(split[9]):0;

        CircleActionDto dto = new CircleActionDto(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
        // 执行 CIRCLE动作
        return this.iExecuteService.executeCircleAction(dto);
    }

}
PARSER_END(ActionParser)

SKIP : {
  " " | "\t" | "\n" | "\r"
}

TOKEN : {
  <NUMBER: ("-")? (["0"-"9"])+ | ("-")? (["0"-"9"])+ "." (["0"-"9"])+ >
| <LPAREN: "(" >
| <RPAREN: ")" >
| <COMMA: "," >
| <IF: "if" >
| <FOR: "for" >
| <WHILE: "while" >
| <BREAK: "break" >
| <CONTINUE: "goto continue" >
| <CONTINUE_END: "::continue::" >
| <DO: "do" >
| <END: "end" >
| <THEN: "then" >
| <PTP: "PTP">
| <LIN: "Lin">
| <ARC: "ARC">
| <CIRCLE: "Circle">
| <LESSTHAN: "<">
| <LESSTHANOREQUAL: "\u2264">
| <GREATERTHAN: ">" >
| <GREATERTHANOREQUAL: "\u2265" >
| <EQUALTO: "=" >
| <EQUAL: "==" >
| <ADD: "+" >
| <NOTEQUAL: "\u2260" >
| <TRUE: "true" >
| <FALSE: "false" >
| <IDENTIFIER: (["a"-"z", "A"-"Z", "0"-"9", "\u4E00"-"\u9FA5"])+>
}

void start() :
{}
{
   statement() ( statement())*
}

// 根据需求将执行拆分为动作与条件
void statement() :
{}
{
  (actionStatement() | conditionalStatement())+
}

// 为了解析不执行动作,但是文本还继续往后解析情况
void noExecStatement() :
{}
{
  (noExecActionStatement() | noExecConditionalStatement() | noExecBreakStatement() | noExecContinueStatement())*
}

// 条件中: if,for循环,变量声明
void conditionalStatement() :
{}
{
  ifStatement() | loopStatement()| declaration() | continueEnd()
}

void noExecConditionalStatement() :
{}
{
  noExecIfStatement() | noExecLoopStatement()| noExecDeclaration() | continueEnd()
}

// 变量声明:这里主要是将变量存储在内存中,在需要使用时可以直接获取,实际调度解析比较的是值
void declaration() :
{
	Token varName, symbol, value1,value2;
}
{
	varName = <IDENTIFIER>
	symbol = <EQUALTO>
	(
		(
			value1 = <NUMBER>
			{
				String name = varName.image;
				float val1 = Float.parseFloat(value1.image);
				variables.put(name, val1);
			}
			|
			value1 = <IDENTIFIER>
			symbol = <ADD>
			value2 = <NUMBER>
			{
				String variableName = varName.image;
				// 获取增加的值
				float val = Float.parseFloat(value2.image);
				// 从变量集合中获取旧值
				float oldValue = variables.getOrDefault(variableName, 0f);
				// 计算
				float result = val + oldValue;
				// 更新变量值
				variables.put(variableName,result);
			}
		)
	)
}

void noExecDeclaration() :
{}
{
   (<IDENTIFIER><EQUALTO> )(<NUMBER> | <IDENTIFIER><ADD><NUMBER>)
}

// if条件解析并执行
void ifStatement() :
{
  boolean conditionResult;
}
{
  {
	  if (breakLoop|continueLoop) {
		noExecStatement();
		return;
	  }
  }
  <IF>
  conditionResult = condition()
  <THEN>
    {
      if (conditionResult) {
       ifConditionStatement();
	   if(breakLoop){
		noExecStatement();
	   }
      }else{
		noExecStatement();
	  }
    }
  <END>

}

void ifConditionStatement() :
{}
{
  (statement()|(<BREAK> { breakLoop = true; })|(<CONTINUE> {this.continueLoop=true;}))*
}

void noExecIfStatement() :
{}
{
  <IF> noExecCondition()<THEN>noExecStatement()<END>
}

// for循环:解析的文本为 for i=0,2,1 do ...end 以及 for count=1,10 do ...end 循环执行10次
void loopStatement() :
{}
{
	forStatement() | whileStatement()
}

void forStatement() :
{
  String identy="";
  int start = 0;
  int end = 0;
  // 这里这个1不能改,为了
  int increment = 1;
  // 用于保存当前 token 流的数组
  Token[] savedTokens = new Token[1];
}
{
  <FOR> <IDENTIFIER>{ identy = token.image; } <EQUALTO>
  <NUMBER> { start = Integer.parseInt(token.image);  variables.put(identy,(float)start);}
  <COMMA> <NUMBER> { end = Integer.parseInt(token.image); }
  (
	(
	  <COMMA> <NUMBER> { increment = Integer.parseInt(token.image); }
	  <DO>
	  { savedTokens[0] = token; }
	  // 循环体开始
	  {
		// 检查循环终止条件
		while (start < end) {
		  // 还原 token 流到上一个循环迭代之前的状态
		  token = savedTokens[0];
		  jj_ntk=-1;
		  // 执行循环体
		  forConditionStatement();
		   // 更新循环变量
		  start += increment;
		  variables.put(identy,(float)start);
		  if(breakLoop){
			noExecStatement();
			breakLoop=false;
			break;
		  }
		  if(continueLoop){
			noExecStatement();
			continueLoop=false;
			continue;
		  }

		}
	  }
	)
	|
	(
	  <DO>
	  { savedTokens[0] = token; }
	  // 循环体开始
	  {
		// 检查循环终止条件
		while (start <= end) {
		  // 还原 token 流到上一个循环迭代之前的状态
		  token = savedTokens[0];
		  // 执行循环体
		  jj_ntk=-1;
		  forConditionStatement();
		   // 更新循环变量
		  start += increment;
		  variables.put(identy,(float)start);

		  if(breakLoop){
			noExecStatement();
			breakLoop=false;
			break;
		  }
		  if(continueLoop){
			noExecStatement();
			continueLoop=false;
			continue;
		  }
		}
	  }
	)
  )

  <END>
}

void whileStatement() :
{
    boolean conditionResult;
    Token[] savedTokens = new Token[1]; // 用于保存当前解析位置的数组
}
{
    <WHILE>
    <LPAREN>
	{ savedTokens[0] = token;} // 保存当前解析位置
    conditionResult = condition()
    <RPAREN> <DO>
    {
       while(conditionResult){
			forConditionStatement();
			// 还原 token 流到上一个循环迭代之前的状态
		  token = savedTokens[0];
		   jj_ntk=-1;
		  conditionResult = condition(); // 重新解析条件
		  jj_consume_token(RPAREN);
		  jj_consume_token(DO);
		  		  if(breakLoop){
			noExecStatement();
			breakLoop=false;
			break;
		  }
		  if(continueLoop){
			noExecStatement();
			continueLoop=false;
			continue;
		  }
	   }
	   if(!conditionResult){
		noExecStatement();
	   }
    }
    <END>
}

void forConditionStatement() :
{}
{
	(statement() | (<BREAK> { this.breakLoop = true; }) |(<CONTINUE> {this.continueLoop=true;}))*
}


void noExecBreakStatement() :
{}
{
    <BREAK>
}


void noExecContinueStatement() :
{}
{
	<CONTINUE>
}

void continueEnd() :
{}
{
	<CONTINUE_END>
}

void noExecLoopStatement() :
{}
{
  (<FOR> <IDENTIFIER> <EQUALTO> <NUMBER> <COMMA>  <NUMBER> (<COMMA> <NUMBER>)? <DO>
	noExecStatement()<END>)
	|
  (<WHILE><LPAREN>noExecCondition()<RPAREN><DO> noExecStatement()<END>)
}

// 执行的动作:动作为同步执行,需要一步一步执行,可以根据具体情况修改
void actionStatement() :
{boolean success=true;}
{
  {
	  if (breakLoop|continueLoop) {
		noExecStatement();
		return;
	  }
  }
  success= action()
  (
	{
		if(!success){
			break;
		}
	}
	success= action()
  )*
}

void noExecActionStatement() :
{}
{
   noExecAction()(noExecAction())*
}

// 定义了具体的执行动作,并将结果返回
boolean action() :
{ boolean success = true; }
{
  (success=  ptpAction() | success=linAction() |success= arcAction() | success=circleAction() )
  { return success;}
}

void noExecAction() :
{}
{
  noExecPtpAction() | noExecLinAction() | noExecArcAction() | noExecCircleAction()
}

// ptp动作解析并执行(调度系统内接口)
boolean ptpAction() :
{}
{
  <PTP> { return executePtpAction(parameters()); }
}

void noExecPtpAction() :
{}
{
  <PTP> parameters()
}

boolean linAction() :
{}
{
  <LIN> {return executeLinAction(parameters()); }
}

void noExecLinAction() :
{}
{
  <LIN> parameters()
}

boolean arcAction() :
{}
{
  <ARC> { return executeArcAction(parameters()); }
}

void noExecArcAction() :
{}
{
  <ARC> parameters()
}

boolean circleAction() :
{}
{
  <CIRCLE> {return executeCircleAction(parameters()); }
}

void noExecCircleAction() :
{}
{
  <CIRCLE> parameters()
}

String parameters() :
{
  StringBuilder params = new StringBuilder();
  String parameter;
   // 用于标记是否是第一个参数
  boolean isFirstParameter = true;
}
{
  <LPAREN>
  (
    parameter = parameter()
    {
      // 如果不是第一个参数，则在参数前添加逗号
      if (!isFirstParameter) {
        params.append(",");
      }
      params.append(parameter);
	  // 将标记设为false，表示已经添加过第一个参数
      isFirstParameter = false;
    }
	// 解析剩余的参数
    (<COMMA> parameter = parameter() { params.append(",").append(parameter); })*
  )?
  <RPAREN>
  { return params.toString(); }
}


String parameter() :
{
  Token t;
}
{
  (
      t = <NUMBER> { return t.image; }
      | t = <IDENTIFIER> { return t.image; }
    )
}


boolean condition() :
{
  boolean result = false;
  Token t1, t2;
  Token op;
}
{
  (
    (
      (
        t1 = <IDENTIFIER>
      )
      |
      (t1 = <NUMBER>)
    )
    (op = <LESSTHAN> | op = <LESSTHANOREQUAL> | op = <GREATERTHAN> | op = <GREATERTHANOREQUAL> | op = <EQUAL> | op = <NOTEQUAL>)
    (
      (
        t2 = <IDENTIFIER>
      )
      |
      (t2 = <NUMBER>)
    )
  )
  {
    // 获取变量名和值
    String name1 = t1.image;
    String name2 = t2.image;
    float value1 = 0f;
    float value2 = 0f;

    if (t1.kind == IDENTIFIER) {
      value1 = variables.getOrDefault(name1, 0f);
    } else {
      value1 = Float.parseFloat(name1);
    }

    if (t2.kind == IDENTIFIER) {
      value2 = variables.getOrDefault(name2, 0f);
    } else {
      value2 = Float.parseFloat(name2);
    }

    // 根据操作符计算条件结果
    if (op.kind == LESSTHAN) {
      result = value1 < value2;
    } else if (op.kind == LESSTHANOREQUAL) {
      result = value1 <= value2;
    } else if (op.kind == GREATERTHAN) {
      result = value1 > value2;
    } else if (op.kind == GREATERTHANOREQUAL) {
      result = value1 >= value2;
    } else if (op.kind == EQUAL) {
      result = value1 == value2;
    } else if (op.kind == NOTEQUAL) {
      result = value1 != value2;
    }
  }
  {
    return result;
  }
}



void noExecCondition() :
{}
{
  (<IDENTIFIER> | <NUMBER>) (<LESSTHAN> | <GREATERTHAN> | <EQUAL> | <NOTEQUAL>) (<IDENTIFIER> | <NUMBER>)
}